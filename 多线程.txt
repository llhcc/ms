1.	CountDownLatch 
    我们先来学习一下JDK1.5 API中关于这个类的详细介绍： 
“一个同步辅助类，在完成一组正在其他线程中执行的操作之前，它允许一个或多个线程一直等待。 用给定的计数 初始化 CountDownLatch。由于调用了 countDown() 方法，所以在当前计数到达零之前，await 方法会一直受阻塞。之后，会释放所有等待的线程，await 的所有后续调用都将立即返回。这种现象只出现一次――计数无法被重置。如果需要重置计数，请考虑使用 CyclicBarrier。” 

    这就是说，CountDownLatch可以用来管理一组相关的线程执行，只需在主线程中调用CountDownLatch 的await方法（一直阻塞），让各个线程调用countDown方法。当所有的线程都只需完countDown了，await也顺利返回，不再阻塞了。在这样情况下尤其适用：将一个任务分成若干线程执行，等到所有线程执行完，再进行汇总处理。 

    下面我举一个非常简单的例子。假设我们要打印1-100，最后再输出“Ok“。1-100的打印顺序不要求统一，只需保证“Ok“是在最后出现即可。 

    解决方案：我们定义一个CountDownLatch，然后开10个线程分别打印（n-1）*10+1至（n-1）*10+10。主线程中调用await方法等待所有线程的执行完毕，每个线程执行完毕后都调用countDown方法。最后再await返回后打印“Ok”。 

具体代码如下（本代码参考了JDK示例代码）： 
Java代码  收藏代码
import java.util.concurrent.CountDownLatch;  
/** 
 * 示例：CountDownLatch的使用举例 
 * Mail: ken@iamcoding.com 
 * @author janeky 
 */  
public class TestCountDownLatch {  
    private static final int N = 10;  
  
    public static void main(String[] args) throws InterruptedException {  
        CountDownLatch doneSignal = new CountDownLatch(N);  
        CountDownLatch startSignal = new CountDownLatch(1);//开始执行信号  
  
        for (int i = 1; i <= N; i++) {  
            new Thread(new Worker(i, doneSignal, startSignal)).start();//线程启动了  
        }  
        System.out.println("begin------------");  
        startSignal.countDown();//开始执行啦  
        doneSignal.await();//等待所有的线程执行完毕  
        System.out.println("Ok");  
  
    }  
  
    static class Worker implements Runnable {  
        private final CountDownLatch doneSignal;  
        private final CountDownLatch startSignal;  
        private int beginIndex;  
  
        Worker(int beginIndex, CountDownLatch doneSignal,  
                CountDownLatch startSignal) {  
            this.startSignal = startSignal;  
            this.beginIndex = beginIndex;  
            this.doneSignal = doneSignal;  
        }  
  
        public void run() {  
            try {  
                startSignal.await(); //等待开始执行信号的发布  
                beginIndex = (beginIndex - 1) * 10 + 1;  
                for (int i = beginIndex; i <= beginIndex + 10; i++) {  
                    System.out.println(i);  
                }  
            } catch (InterruptedException e) {  
                e.printStackTrace();  
            } finally {  
                doneSignal.countDown();  
            }  
        }  
    }  
}  


    总结：CounDownLatch对于管理一组相关线程非常有用。上述示例代码中就形象地描述了两种使用情况。第一种是计算器为1，代表了两种状态，开关。第二种是计数器为N，代表等待N个操作完成。今后我们在编写多线程程序时，可以使用这个构件来管理一组独立线程的执行。 
--------------------------------------------------
public static void main(String[] args) {  
	      
        ExecutorService exec = Executors.newCachedThreadPool();       
        final Random random=new Random();  
          
        final CyclicBarrier barrier=new CyclicBarrier(4,new Runnable(){  
            @Override  
            public void run() {  
                System.out.println("大家都到齐了，开始happy去");  
            }});  
          
        for(int i=0;i<4;i++){  
            exec.execute(new Runnable(){  
                @Override  
                public void run() {  
                    try {  
                        Thread.sleep(random.nextInt(1000));  
                    } catch (InterruptedException e) {  
                        e.printStackTrace();  
                    }  
                    System.out.println(Thread.currentThread().getName()+"到了，其他哥们呢");  
                    try {  
                        barrier.await();//等待其他哥们  
                    } catch (InterruptedException e) {  
                        e.printStackTrace();  
                    } catch (BrokenBarrierException e) {  
                        e.printStackTrace();  
                    }  
                }});  
        }  
        exec.shutdown();  
    }  	

------------------------------------------------------------------
public static void main(String args[]){
		Thread.currentThread().interrupt();  
		System.out.println("Interrupted:"+ Thread.interrupted());  
	//  下面的判断会打印出来这样的语句 Interrupt：false  
	//  这样的结果是不是很让人费解呢？？？  
	//    
	//  分析其原因为：  
	//    
	//  因为在上面的一句代码可以中断线程，所以if判断线程是否中断就会得到的事true  
	//  但是 Thread.interrupted()这个方法执行完后就会清除线程的中断状态，  
	//  所以最后再次的打印Thread.interrupted()方法就会得到false结果。  
	if(Thread.interrupted())  
	System.out.println("Interrupted:"+ Thread.interrupted());  
	else  
	{  
	System.out.println("Not Interrupted"+Thread.interrupted());  
	}  
	//  如果用下面的这个方法来进行if判断就会出现那种情况了，  
	//  Thread.currentThread().isInterrupted();这个方法得到的结果：Interrupt：true  
	//    
	//  因为它判断完后就不会清除线程的中断状态，只是返回一个线程状态的结果  
	}  
	
---------------------------------------------------
public class Test {
	public static void main(String[] args) {
		/*for(int i=0; i < 10000; i++){
			MyThread myThread = new MyThread();
			myThread.start();
		}*/
		/*for(int i=0; i < 10000; i++){
			MyRunnable myRunnable = new MyRunnable();
			Thread thread = new Thread(myRunnable);
			thread.start();
		}*/
		ExecutorService pool = Executors.newFixedThreadPool(2);
		List<Future> list = new ArrayList<Future>();
		for(int i=0; i < 10000; i++){
			Callable c = new MyCallable(i + "");
			Future f = pool.submit(c);
			list.add(f);
		}
		pool.shutdown();
		for(Future f : list){
			try {
				System.out.println("---" + f.get().toString());
			} catch (InterruptedException e) {
				e.printStackTrace();
			} catch (ExecutionException e) {
				e.printStackTrace();
			}
		}
	}
}
-------
public class MyCallable implements Callable<Object>{
	private static int i=0;
	private String taskNum;  
	MyCallable(String taskNum) {  
	   this.taskNum = taskNum;  
	}  
	@Override
	public Object call() throws Exception {
		System.out.println(">>>" + taskNum + "任务启动");  
		   Date dateTmp1 = new Date();  
		   //Thread.sleep(1000);  
		   Date dateTmp2 = new Date();  
		   long time = dateTmp2.getTime() - dateTmp1.getTime();  
		   i++;
		   System.out.println(">>>" + taskNum + "任务终止");  
		   return taskNum + "任务返回运行结果,当前任务时间【" + time + "毫秒】" + i;  
	}
}
------
public class MyRunnable implements Runnable	{
	private static int i = 0;
	@Override
	public void run() {
		i++;
		System.out.println("MyRunnable.run();" + i);
	}
}
------
public class MyThread extends Thread{
	private static int i = 0;
	@Override
	public void run() {
		i++;
		System.out.println("MyThread.run();" + i);
	}
}
-------------------------------------------------------------------------------------



	